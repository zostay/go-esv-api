// Code generated by github.com/zostay/go-esv-api/tools/gen
// DO NOT EDIT!!!

package esv

const (
	DefaultBaseURL = "https://api.esv.org/v3/"
)

func WithIncludePassageReferences(o bool) OptionBool {
	return OptionBool{"include-passage-references", o}
}

func WithIncludeVerseNumbers(o bool) OptionBool {
	return OptionBool{"include-verse-numbers", o}
}

func WithIncludeFirstVerseNumbers(o bool) OptionBool {
	return OptionBool{"include-first-verse-numbers", o}
}

func WithIncludeFootnotes(o bool) OptionBool {
	return OptionBool{"include-footnotes", o}
}

func WithIncludeFootnoteBody(o bool) OptionBool {
	return OptionBool{"include-footnote-body", o}
}

func WithIncludeHeadings(o bool) OptionBool {
	return OptionBool{"include-headings", o}
}

func WithIncludeShortCopyright(o bool) OptionBool {
	return OptionBool{"include-short-copyright", o}
}

func WithIncludeCopyright(o bool) OptionBool {
	return OptionBool{"include-copyright", o}
}

func WithIncludePassageHorizontalLines(o bool) OptionBool {
	return OptionBool{"include-passage-horizontal-lines", o}
}

func WithIncludeHeadingHorizontalLines(o bool) OptionBool {
	return OptionBool{"include-heading-horizontal-lines", o}
}

func WithHorizontalLineLength(o int) OptionInt {
	return OptionInt{"horizontal-line-length", o}
}

func WithIncludeSelahs(o bool) OptionBool {
	return OptionBool{"include-selahs", o}
}

func WithIndentUsing(o string) OptionString {
	return OptionString{"indent-using", o}
}

func WithIndentParagraphs(o int) OptionInt {
	return OptionInt{"indent-paragraphs", o}
}

func WithIndentPoetry(o bool) OptionBool {
	return OptionBool{"indent-poetry", o}
}

func WithIndentPoetryLines(o int) OptionInt {
	return OptionInt{"indent-poetry-lines", o}
}

func WithIndentDeclares(o int) OptionInt {
	return OptionInt{"indent-declares", o}
}

func WithIndentPsalmDoxology(o int) OptionInt {
	return OptionInt{"indent-psalm-doxology", o}
}

func WithLineLength(o int) OptionInt {
	return OptionInt{"line-length", o}
}

type PassageTextResult struct {
	Query       string
	Canonical   string
	Parsed      [][]Location
	PassageMeta struct {
		Canonical    string
		ChapterStart []Location
		ChapterEnd   []Location
		PrevVerse    Location
		NextVerse    Location
		PrevChapter  []Location
		NextChapter  []Location
	}
	Passages []string
}

func (c Client) PassageText(q string, o ...Option) (PassageTextResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageTextResult
	err := c.CallEndpoint("passage/text", opts, &result)
	return result, err
}

func WithIncludeCssLink(o bool) OptionBool {
	return OptionBool{"include-css-link", o}
}

func WithInlineStyles(o bool) OptionBool {
	return OptionBool{"inline-styles", o}
}

func WithWrappingDiv(o bool) OptionBool {
	return OptionBool{"wrapping-div", o}
}

func WithDivClasses(o string) OptionString {
	return OptionString{"div-classes", o}
}

func WithParagraphTag(o string) OptionString {
	return OptionString{"paragraph-tag", o}
}

func WithIncludeBookTitles(o bool) OptionBool {
	return OptionBool{"include-book-titles", o}
}

func WithIncludeVerseAnchors(o bool) OptionBool {
	return OptionBool{"include-verse-anchors", o}
}

func WithIncludeChapterNumbers(o bool) OptionBool {
	return OptionBool{"include-chapter-numbers", o}
}

func WithIncludeCrossrefs(o bool) OptionBool {
	return OptionBool{"include-crossrefs", o}
}

func WithIncludeSubheadings(o bool) OptionBool {
	return OptionBool{"include-subheadings", o}
}

func WithIncludeSurroundingChapters(o bool) OptionBool {
	return OptionBool{"include-surrounding-chapters", o}
}

func WithIncludeSurroundingChaptersBelow(o string) OptionString {
	return OptionString{"include-surrounding-chapters-below", o}
}

func WithIncludeSurroundingChaptersBelowThreshold(o int) OptionInt {
	return OptionInt{"include-surrounding-chapters-below-threshold", o}
}

func WithLinkUrl(o string) OptionString {
	return OptionString{"link-url", o}
}

func WithCrossrefUrl(o string) OptionString {
	return OptionString{"crossref-url", o}
}

func WithPrefaceUrl(o string) OptionString {
	return OptionString{"preface-url", o}
}

func WithIncludeAudioLink(o bool) OptionBool {
	return OptionBool{"include-audio-link", o}
}

func WithAttachAudioLinkTo(o string) OptionString {
	return OptionString{"attach-audio-link-to", o}
}

type PassageHtmlResult struct {
	Query       string
	Canonical   string
	Parsed      [][]Location
	PassageMeta struct {
		Canonical    string
		ChapterStart []Location
		ChapterEnd   []Location
		PrevVerse    Location
		NextVerse    Location
		PrevChapter  []Location
		NextChapter  []Location
	}
	Passages []string
}

func (c Client) PassageHtml(q string, o ...Option) (PassageHtmlResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageHtmlResult
	err := c.CallEndpoint("passage/html", opts, &result)
	return result, err
}

func WithPageSize(o int) OptionInt {
	return OptionInt{"page-size", o}
}

func WithPage(o int) OptionInt {
	return OptionInt{"page", o}
}

type PassageSearchResult struct {
	Page         int
	TotalResults int
	Results      []struct {
		Reference string
		Content   string
	}
	TotalPages int
}

func (c Client) PassageSearch(q string, o ...Option) (PassageSearchResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageSearchResult
	err := c.CallEndpoint("passage/search", opts, &result)
	return result, err
}

// Code generated by github.com/zostay/go-esv-api/tools/gen
// DO NOT EDIT!!!

package esv

import "context"

const (
	// DefaultBaseURL is the base URL of the ESV API site online.
	DefaultBaseURL = "https://api.esv.org/v3/"
)

// WithIncludePassageReferences provides the "include-passage-references" option to pass with your API
// call to ESV API.
func WithIncludePassageReferences(o bool) OptionBool {
	return OptionBool{"include-passage-references", o}
}

// WithIncludeVerseNumbers provides the "include-verse-numbers" option to pass with your API
// call to ESV API.
func WithIncludeVerseNumbers(o bool) OptionBool {
	return OptionBool{"include-verse-numbers", o}
}

// WithIncludeFirstVerseNumbers provides the "include-first-verse-numbers" option to pass with your API
// call to ESV API.
func WithIncludeFirstVerseNumbers(o bool) OptionBool {
	return OptionBool{"include-first-verse-numbers", o}
}

// WithIncludeFootnotes provides the "include-footnotes" option to pass with your API
// call to ESV API.
func WithIncludeFootnotes(o bool) OptionBool {
	return OptionBool{"include-footnotes", o}
}

// WithIncludeFootnoteBody provides the "include-footnote-body" option to pass with your API
// call to ESV API.
func WithIncludeFootnoteBody(o bool) OptionBool {
	return OptionBool{"include-footnote-body", o}
}

// WithIncludeHeadings provides the "include-headings" option to pass with your API
// call to ESV API.
func WithIncludeHeadings(o bool) OptionBool {
	return OptionBool{"include-headings", o}
}

// WithIncludeShortCopyright provides the "include-short-copyright" option to pass with your API
// call to ESV API.
func WithIncludeShortCopyright(o bool) OptionBool {
	return OptionBool{"include-short-copyright", o}
}

// WithIncludeCopyright provides the "include-copyright" option to pass with your API
// call to ESV API.
func WithIncludeCopyright(o bool) OptionBool {
	return OptionBool{"include-copyright", o}
}

// WithIncludePassageHorizontalLines provides the "include-passage-horizontal-lines" option to pass with your API
// call to ESV API.
func WithIncludePassageHorizontalLines(o bool) OptionBool {
	return OptionBool{"include-passage-horizontal-lines", o}
}

// WithIncludeHeadingHorizontalLines provides the "include-heading-horizontal-lines" option to pass with your API
// call to ESV API.
func WithIncludeHeadingHorizontalLines(o bool) OptionBool {
	return OptionBool{"include-heading-horizontal-lines", o}
}

// WithHorizontalLineLength provides the "horizontal-line-length" option to pass with your API
// call to ESV API.
func WithHorizontalLineLength(o int) OptionInt {
	return OptionInt{"horizontal-line-length", o}
}

// WithIncludeSelahs provides the "include-selahs" option to pass with your API
// call to ESV API.
func WithIncludeSelahs(o bool) OptionBool {
	return OptionBool{"include-selahs", o}
}

// WithIndentUsing provides the "indent-using" option to pass with your API
// call to ESV API.
func WithIndentUsing(o string) OptionString {
	return OptionString{"indent-using", o}
}

// WithIndentParagraphs provides the "indent-paragraphs" option to pass with your API
// call to ESV API.
func WithIndentParagraphs(o int) OptionInt {
	return OptionInt{"indent-paragraphs", o}
}

// WithIndentPoetry provides the "indent-poetry" option to pass with your API
// call to ESV API.
func WithIndentPoetry(o bool) OptionBool {
	return OptionBool{"indent-poetry", o}
}

// WithIndentPoetryLines provides the "indent-poetry-lines" option to pass with your API
// call to ESV API.
func WithIndentPoetryLines(o int) OptionInt {
	return OptionInt{"indent-poetry-lines", o}
}

// WithIndentDeclares provides the "indent-declares" option to pass with your API
// call to ESV API.
func WithIndentDeclares(o int) OptionInt {
	return OptionInt{"indent-declares", o}
}

// WithIndentPsalmDoxology provides the "indent-psalm-doxology" option to pass with your API
// call to ESV API.
func WithIndentPsalmDoxology(o int) OptionInt {
	return OptionInt{"indent-psalm-doxology", o}
}

// WithLineLength provides the "line-length" option to pass with your API
// call to ESV API.
func WithLineLength(o int) OptionInt {
	return OptionInt{"line-length", o}
}

// PassageTextResult is the structure returned by PassageText
// containing the response to your request.
type PassageTextResult struct {
	Query       string
	Canonical   string
	Parsed      [][]Location
	PassageMeta struct {
		Canonical    string
		ChapterStart []Location
		ChapterEnd   []Location
		PrevVerse    Location
		NextVerse    Location
		PrevChapter  []Location
		NextChapter  []Location
	}
	Passages []string
}

// PassageText performs the "passage/text" ESV API call and returns
// PassageText with your results.
func (c Client) PassageText(q string, o ...Option) (PassageTextResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageTextResult
	err := c.CallEndpoint(context.Background(), "passage/text", opts, &result)
	return result, err
}

// PassageTextContext performs the "passage/text" ESV API call and returns
// PassageText with your results.
func (c Client) PassageTextContext(ctx context.Context, q string, o ...Option) (PassageTextResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageTextResult
	err := c.CallEndpoint(ctx, "passage/text", opts, &result)
	return result, err
}

// WithIncludeCssLink provides the "include-css-link" option to pass with your API
// call to ESV API.
func WithIncludeCssLink(o bool) OptionBool {
	return OptionBool{"include-css-link", o}
}

// WithInlineStyles provides the "inline-styles" option to pass with your API
// call to ESV API.
func WithInlineStyles(o bool) OptionBool {
	return OptionBool{"inline-styles", o}
}

// WithWrappingDiv provides the "wrapping-div" option to pass with your API
// call to ESV API.
func WithWrappingDiv(o bool) OptionBool {
	return OptionBool{"wrapping-div", o}
}

// WithDivClasses provides the "div-classes" option to pass with your API
// call to ESV API.
func WithDivClasses(o string) OptionString {
	return OptionString{"div-classes", o}
}

// WithParagraphTag provides the "paragraph-tag" option to pass with your API
// call to ESV API.
func WithParagraphTag(o string) OptionString {
	return OptionString{"paragraph-tag", o}
}

// WithIncludeBookTitles provides the "include-book-titles" option to pass with your API
// call to ESV API.
func WithIncludeBookTitles(o bool) OptionBool {
	return OptionBool{"include-book-titles", o}
}

// WithIncludeVerseAnchors provides the "include-verse-anchors" option to pass with your API
// call to ESV API.
func WithIncludeVerseAnchors(o bool) OptionBool {
	return OptionBool{"include-verse-anchors", o}
}

// WithIncludeChapterNumbers provides the "include-chapter-numbers" option to pass with your API
// call to ESV API.
func WithIncludeChapterNumbers(o bool) OptionBool {
	return OptionBool{"include-chapter-numbers", o}
}

// WithIncludeCrossrefs provides the "include-crossrefs" option to pass with your API
// call to ESV API.
func WithIncludeCrossrefs(o bool) OptionBool {
	return OptionBool{"include-crossrefs", o}
}

// WithIncludeSubheadings provides the "include-subheadings" option to pass with your API
// call to ESV API.
func WithIncludeSubheadings(o bool) OptionBool {
	return OptionBool{"include-subheadings", o}
}

// WithIncludeSurroundingChapters provides the "include-surrounding-chapters" option to pass with your API
// call to ESV API.
func WithIncludeSurroundingChapters(o bool) OptionBool {
	return OptionBool{"include-surrounding-chapters", o}
}

// WithIncludeSurroundingChaptersBelow provides the "include-surrounding-chapters-below" option to pass with your API
// call to ESV API.
func WithIncludeSurroundingChaptersBelow(o string) OptionString {
	return OptionString{"include-surrounding-chapters-below", o}
}

// WithIncludeSurroundingChaptersBelowThreshold provides the "include-surrounding-chapters-below-threshold" option to pass with your API
// call to ESV API.
func WithIncludeSurroundingChaptersBelowThreshold(o int) OptionInt {
	return OptionInt{"include-surrounding-chapters-below-threshold", o}
}

// WithLinkUrl provides the "link-url" option to pass with your API
// call to ESV API.
func WithLinkUrl(o string) OptionString {
	return OptionString{"link-url", o}
}

// WithCrossrefUrl provides the "crossref-url" option to pass with your API
// call to ESV API.
func WithCrossrefUrl(o string) OptionString {
	return OptionString{"crossref-url", o}
}

// WithPrefaceUrl provides the "preface-url" option to pass with your API
// call to ESV API.
func WithPrefaceUrl(o string) OptionString {
	return OptionString{"preface-url", o}
}

// WithIncludeAudioLink provides the "include-audio-link" option to pass with your API
// call to ESV API.
func WithIncludeAudioLink(o bool) OptionBool {
	return OptionBool{"include-audio-link", o}
}

// WithAttachAudioLinkTo provides the "attach-audio-link-to" option to pass with your API
// call to ESV API.
func WithAttachAudioLinkTo(o string) OptionString {
	return OptionString{"attach-audio-link-to", o}
}

// PassageHtmlResult is the structure returned by PassageHtml
// containing the response to your request.
type PassageHtmlResult struct {
	Query       string
	Canonical   string
	Parsed      [][]Location
	PassageMeta struct {
		Canonical    string
		ChapterStart []Location
		ChapterEnd   []Location
		PrevVerse    Location
		NextVerse    Location
		PrevChapter  []Location
		NextChapter  []Location
	}
	Passages []string
}

// PassageHtml performs the "passage/html" ESV API call and returns
// PassageHtml with your results.
func (c Client) PassageHtml(q string, o ...Option) (PassageHtmlResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageHtmlResult
	err := c.CallEndpoint(context.Background(), "passage/html", opts, &result)
	return result, err
}

// PassageHtmlContext performs the "passage/html" ESV API call and returns
// PassageHtml with your results.
func (c Client) PassageHtmlContext(ctx context.Context, q string, o ...Option) (PassageHtmlResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageHtmlResult
	err := c.CallEndpoint(ctx, "passage/html", opts, &result)
	return result, err
}

// WithPageSize provides the "page-size" option to pass with your API
// call to ESV API.
func WithPageSize(o int) OptionInt {
	return OptionInt{"page-size", o}
}

// WithPage provides the "page" option to pass with your API
// call to ESV API.
func WithPage(o int) OptionInt {
	return OptionInt{"page", o}
}

// PassageSearchResult is the structure returned by PassageSearch
// containing the response to your request.
type PassageSearchResult struct {
	Page         int
	TotalResults int
	Results      []struct {
		Reference string
		Content   string
	}
	TotalPages int
}

// PassageSearch performs the "passage/search" ESV API call and returns
// PassageSearch with your results.
func (c Client) PassageSearch(q string, o ...Option) (PassageSearchResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageSearchResult
	err := c.CallEndpoint(context.Background(), "passage/search", opts, &result)
	return result, err
}

// PassageSearchContext performs the "passage/search" ESV API call and returns
// PassageSearch with your results.
func (c Client) PassageSearchContext(ctx context.Context, q string, o ...Option) (PassageSearchResult, error) {
	opts := make([]Option, len(o)+1)

	opts[0] = OptionString{"q", q}

	for i, opt := range o {
		opts[i+1] = opt
	}
	var result PassageSearchResult
	err := c.CallEndpoint(ctx, "passage/search", opts, &result)
	return result, err
}
